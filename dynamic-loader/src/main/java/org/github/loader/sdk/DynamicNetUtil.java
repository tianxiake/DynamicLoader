package org.github.loader.sdk;import android.content.Context;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.telephony.TelephonyManager;/** * Created by JUNCAIFEIYANG on 2016/3/28. */public class DynamicNetUtil {    public enum NetworkStatus{        /**         * 无网络         */        NETWORK_NONE(100),        /**         * 在wifi环境         */        NETWORK_WIFI(1),        /**         * 在4G环境         */        NETWORK_4G(2),        /**         * 在3G环境         */        NETWORK_3G(3),        /**         * 在2G环境         */        NETWORK_2G(4),        /**         * 未知网络(此状应该尝试联网发包)         * 等同于All，有网就通         */        NETWORK_UNKNOWN(5);        private final int type;        private NetworkStatus(int type){            this.type=type;        }        public int getType(){            return this.type;        }    }    /**     * 注意一点,没有权限的时候代码要朝向有利于我们的方向     * @return     */    public static NetworkStatus getNetworkTypeStatus(Context context){        try {            final ConnectivityManager connectMgr = (ConnectivityManager) context                    .getSystemService(Context.CONNECTIVITY_SERVICE);            final NetworkInfo info = connectMgr.getActiveNetworkInfo();            final int type;            if (info == null) {                type = -2;            } else {                type = info.getType();            }            NetworkStatus tempType;            switch (type) {                case ConnectivityManager.TYPE_WIFI:                    tempType = NetworkStatus.NETWORK_WIFI;                    break;                case ConnectivityManager.TYPE_MOBILE:                    int subtype = info.getSubtype();                    switch (subtype) {                        case TelephonyManager.NETWORK_TYPE_GPRS:                        case TelephonyManager.NETWORK_TYPE_EDGE:                        case TelephonyManager.NETWORK_TYPE_CDMA:                        case TelephonyManager.NETWORK_TYPE_1xRTT:                        case TelephonyManager.NETWORK_TYPE_IDEN: {                            tempType = NetworkStatus.NETWORK_2G;                            break;                        }                        case TelephonyManager.NETWORK_TYPE_UMTS:                        case TelephonyManager.NETWORK_TYPE_EVDO_0:                        case TelephonyManager.NETWORK_TYPE_EVDO_A:                        case TelephonyManager.NETWORK_TYPE_HSDPA:                        case TelephonyManager.NETWORK_TYPE_HSUPA:                        case TelephonyManager.NETWORK_TYPE_HSPA:                        case TelephonyManager.NETWORK_TYPE_EVDO_B:                        case TelephonyManager.NETWORK_TYPE_EHRPD:                        case TelephonyManager.NETWORK_TYPE_HSPAP: {                            tempType = NetworkStatus.NETWORK_3G;                            break;                        }                        case TelephonyManager.NETWORK_TYPE_LTE:                        case 17:                        case 18:                        case 19:                        case 20:{                            tempType = NetworkStatus.NETWORK_4G;                            break;                        }                        default: {                            tempType = NetworkStatus.NETWORK_UNKNOWN;                            break;                        }                    }                    break;                case -1:                    tempType = NetworkStatus.NETWORK_NONE;                    break;                default:                    tempType = NetworkStatus.NETWORK_UNKNOWN;                    break;            }            return tempType;        }catch (Throwable e){            return NetworkStatus.NETWORK_UNKNOWN;        }    }    public static boolean isNetAvailable(Context context) {        NetworkStatus ns = getNetworkTypeStatus(context);        return ns == NetworkStatus.NETWORK_2G || ns == NetworkStatus.NETWORK_3G || ns == NetworkStatus.NETWORK_4G || ns == NetworkStatus.NETWORK_WIFI || ns == NetworkStatus.NETWORK_UNKNOWN;    }}