package org.github.loader.sdk;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import java.io.DataInputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.HttpURLConnection;import java.net.URL;import java.util.zip.GZIPInputStream;import java.util.zip.GZIPOutputStream;/** * 网络层 * Created by yum on 16/9/29. */public class DynamicProtocol {    private static final String TAG="DynamicProtocol";    protected DynamicProtocol(){    }    public byte[] send(String url, byte[] bytes) throws IOException {        // 上传文件列表，设置 socket 超时时长 无限长        HttpURLConnection urlConnection=null;        try {            DynamicLogger.info(TAG,"url:"+url);            urlConnection=(HttpURLConnection)new URL(url).openConnection();            setAuthorizationAndSessionID(urlConnection);            urlConnection.setRequestProperty("Accept", "application/json");            urlConnection.setRequestProperty("Accept-Encoding", "gzip");            urlConnection.setRequestProperty("Content-Encoding", "gzip");            urlConnection.setRequestProperty("Content-Type", "gateway/nr; charset=utf-8");            ByteArrayOutputStream bos = new ByteArrayOutputStream();            GZIPOutputStream gos = new GZIPOutputStream(bos);            gos.write(bytes);            gos.close();            byte[] req_content = bos.toByteArray();            byte[] req_content_encrypt;            req_content_encrypt = DynamicUtil.encryptByPublicKey(req_content);            urlConnection.setDoOutput(true);            urlConnection.setDoInput(true);            urlConnection.connect();            OutputStream outputStream=urlConnection.getOutputStream();            outputStream.write(req_content_encrypt);            outputStream.flush();            outputStream.close();            int code = urlConnection.getResponseCode();            if (code == 206) {                int content_length = urlConnection.getContentLength();                String contentType =urlConnection.getHeaderField("ContentType");                DynamicLogger.info(TAG,"content-Length:"+content_length);                DataInputStream dis=new DataInputStream(urlConnection.getInputStream());                byte[] resp_content = new byte[content_length];                dis.readFully(resp_content);                dis.close();                byte[] resp_content_decode;                if (contentType != null && contentType.startsWith("application/json;")) {                    resp_content_decode = resp_content;                } else {                    resp_content_decode = DynamicUtil.decryptByPublicKey(resp_content);                }                InputStream content = new GZIPInputStream(new ByteArrayInputStream(resp_content_decode));                return DynamicFileUtil.readBytesInputStream(content,10240);            } else {                DynamicLogger.warn(TAG,"server code"+code);            }        }catch (Exception e){            DynamicLogger.warn(TAG,"",e);        }finally {            if(urlConnection!=null){                urlConnection.disconnect();            }        }        return null;    }    private void setAuthorizationAndSessionID(HttpURLConnection httpPost){        long currentTime =System.currentTimeMillis();        String authorization = DynamicUtil.hash("salt:" + currentTime + ":" + "jar");        httpPost.setRequestProperty("Time", String.valueOf(currentTime));        httpPost.setRequestProperty("Authorization", authorization);    }}